#!/usr/bin/env ruby

require 'net/http'
require 'optparse'
require 'tempfile'
require 'time'
require 'uri'

TOR_EXIT_NODE_ADDRESSES_URL = "https://check.torproject.org/exit-addresses"

# specific to the time format used in the output at the above URL at the
# time of writing
ISO8601_PAT = "(?:[1-9][0-9]*)?[0-9]{4}-" \
              "(?:1[0-2]|0[1-9])-" \
              "(?:3[0-1]|0[1-9]|[1-2][0-9]) " \
              "(?:2[0-3]|[0-1][0-9]):" \
              "[0-5][0-9]:[0-5][0-9]"

IPv4_PAT    = '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})'

BAD_IP_REGEXP = Regexp.new("^ExitAddress #{IPv4_PAT} #{ISO8601_PAT}$")

dest = ARGV[0]

uri = URI(TOR_EXIT_NODE_ADDRESSES_URL)

def extract_exit_node_ip(line)
  match_data = BAD_IP_REGEXP.match(line)
  return if match_data.nil?
  captures = match_data.captures
  return if captures.any? {|c| c.to_i > 255 }
  captures.join('.')
end

options = {}
OptionParser.new do |opts|
  opts.banner = "Usage: nginx_tor_ip_blacklist.rb [options]"
  opts.on('-o', '--output-file NAME', 'Output filename for nginx deny directives') do |v|
    options[:output_file] = v
  end
  opts.on('-d', '--[no-]debug', 'Prints debug output') do |v|
    options[:debug] = v
  end
  opts.on('-h', '--help', 'Show this message') do |v|
    puts opts
    exit
  end
end.parse!

output_file = options[:output_file]

if output_file.nil? || output_file.empty?
  STDERR.puts "No --output-file option set"
  exit(1)
end

unless File.writable?(output_file) || File.writable?(File.dirname(output_file))
  STDERR.puts "Output file #{output_file} not writable"
  exit(1)
end

err = nil

begin
  temp_file = Tempfile.new('nginx_tor_ip_blacklist')
  begin
    req_success = false

    Net::HTTP.start(uri.host, uri.port, :use_ssl => true) do |http|
      http.verify_mode = OpenSSL::SSL::VERIFY_PEER
      req = Net::HTTP::Get.new(uri.request_uri)

      http.request(req) do |response|
        req_success = true
        bad_ips = {}
        all_bad_ip_count = 0
        temp_file.write("# generated by nginx_tor_ip_blacklist.rb at #{DateTime.now.iso8601}\n\n")
        response.read_body do |chunk|
          chunk.split("\n").each_with_object([]) do |line, memo|
            bad_ip = extract_exit_node_ip(line)
            next if bad_ip.nil?
            all_bad_ip_count += 1
            next if bad_ips.has_key?(bad_ip)
            bad_ips[bad_ip] = true # cheap uniqueness check
            temp_file.write("deny #{bad_ip};\n")
          end
        end
        if options[:debug]
          puts "Found #{all_bad_ip_count} IP addresses, #{bad_ips.size} unique"
        end
      end
    end

    if req_success
      temp_file.flush
      FileUtils.cp(temp_file.path, output_file)
    else
      err = "HTTP request for Tor exit node address list failed"
    end
  rescue Timeout
    err = "Timeout accessing Tor exit node address list"
  end
ensure
  temp_file.close(true)
end

if err
  STDERR.puts err
  exit(1)
end